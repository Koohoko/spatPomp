
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin20 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> png(filename="bm-%02d.png",res=100)
> library(spatPomp)
Loading required package: pomp
> i <- 1
> U <- switch(i,2,10)
> N <- switch(i,2,10)
> Np <- switch(i,10,100)
> 
> # For CRAN tests, need to limit to two cores
> # https://stackoverflow.com/questions/50571325/r-cran-check-fail-when-using-parallel-functions
> chk <- Sys.getenv("_R_CHECK_LIMIT_CORES_", "")
> 
> if (nzchar(chk) && chk == "TRUE") {
+   # use 2 cores for CRAN
+   num_workers <- 2L
+ } else {
+   # use all cores when testing
+   num_workers <- parallel::detectCores()
+ }
> num_workers <- 2L
> 
> # if(.Platform$OS.type != "windows")
> #   doParallel::registerDoParallel(num_workers)
> 
> # For covr, needs to be single core (https://github.com/r-lib/covr/issues/227)
> 
> # CRAN win-builder test fails in foreach for iubf when using a single
> # core registered with 
> ###  doParallel::registerDoParallel(1)
> # so run without registering parallel backend at all
> # this generates an R warning
> # Warning message:
> # executing %dopar% sequentially: no parallel backend registered 
> # but that is not a major problem
> 
> set.seed(2)
> ## doRNG::registerDoRNG(2)
> ## using doRNG with 1 core leads to warnings: it seems to make
> ## foreach confused about whether it is running in parallel or not.
> 
> b_model <- bm(U=U,N=N) 
> b_model_no_rproc <- spatPomp(b_model,rprocess=NULL)
> b_model_no_eunit_measure <- spatPomp(b_model,eunit_measure=NULL)
> b_model_no_vunit_measure <- spatPomp(b_model,vunit_measure=NULL)
> b_model_t0_equal_t1 <- spatPomp(b_model,t0=1)
> 
> 
> ## ------------------------------------------------------------
> ## The bm model provides a simple example to test other methods.
> ## First, we test the filtering methods
> ## ____________________________________________________________
> 
> ##
> ## exact likelihood via the Kalman filter
> ##
> 
> paste("bm kalman filter loglik: ",round(bm_kalman_logLik(b_model),10))
[1] "bm kalman filter loglik:  -10.5025878626"
> 
> ##
> ## pfilter tested on bm
> ##
> 
> b_pf <- pfilter(b_model,Np=Np)
> paste("bm pfilter loglik: ",round(logLik(b_pf),10))
[1] "bm pfilter loglik:  -10.1282113761"
> 
> ##
> ## abf tested on bm. abf uses parallelization, so we also test that
> ##
> 
> b_bag_nbhd <- function(object, time, unit) {
+   nbhd_list <- list()
+   if(unit>1) nbhd_list <- c(nbhd_list, list(c(unit-1, time)))
+   return(nbhd_list)
+ }
> 
> set.seed(7)
> b_abf <- abf(b_model,Nrep=2,Np=Np, nbhd = b_bag_nbhd)
Warning message:
executing %dopar% sequentially: no parallel backend registered 
> paste("bm abf loglik: ",round(logLik(b_abf),10))
[1] "bm abf loglik:  -9.6241814039"
> 
> set.seed(7)
> b_abf_repeat <- abf(b_abf)
> paste("check abf on abfd_spatPomp: ",
+   logLik(b_abf_repeat)==logLik(b_abf))
[1] "check abf on abfd_spatPomp:  TRUE"
> 
> ##
> ## abfir tested on bm
> ##
> 
> b_abfir <- abfir(b_model, Nrep = 2, Np = Np, nbhd = b_bag_nbhd)
> paste("bm abfir loglik: ",round(logLik(b_abfir),10))
[1] "bm abfir loglik:  -9.6437796804"
> 
> ##
> ## bpfilter tested on bm
> ##
> 
> set.seed(5)
> b_bpfilter <- bpfilter(b_model, Np = Np, block_size = 1)
> paste("bm bpfilter loglik: ",round(logLik(b_bpfilter),10))
[1] "bm bpfilter loglik:  -11.2089477605"
> set.seed(5)
> b_bpfilter_repeat <- bpfilter(b_bpfilter)
> paste("check bpfilter on bpfilterd_spatPomp: ",
+   logLik(b_bpfilter)==logLik(b_bpfilter_repeat))
[1] "check bpfilter on bpfilterd_spatPomp:  TRUE"
> 
> bpfilter(b_model_t0_equal_t1,Np = Np, block_size = 1)
<object of class ‘bpfilterd_spatPomp’>
> 
> set.seed(5)
> b_bpfilter_filter_traj <- bpfilter(b_bpfilter,filter_traj=TRUE)
> paste("bpfilter filter trajectory final particle: ")
[1] "bpfilter filter trajectory final particle: "
> round(b_bpfilter_filter_traj@filter.traj[,1,],3)
    time
name [,1]  [,2]  [,3]
  X1    0 1.373 2.349
  X2    0 2.035 0.796
> 
> set.seed(5)
> b_bpfilter_save_states <- bpfilter(b_bpfilter,save_states=TRUE)
> paste("bpfilter final particles: ")
[1] "bpfilter final particles: "
> round(b_bpfilter_save_states@saved.states[[N]],3)
    .id
name  [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9] [,10]
  X1 2.611 2.236 2.186 2.186 2.349 1.077 1.077 1.155 1.442 1.063
  X2 0.796 0.442 0.442 0.231 0.231 0.231 0.648 0.648 1.337 1.019
> 
> ## test bpfilter error messages
> try(bpfilter())
Error in bpfilter() : bpfilter: data is a required argument.
> try(bpfilter("JUNK"))
Error : ‘bpfilter’ is undefined for ‘data’ of class ‘character’.
> try(bpfilter(b_model))
Error : in ‘bpfilter’: ‘block_list’ or ‘block_size’ must be specified to the call
> try(bpfilter(b_model,block_list=block_list,block_size=23))
Error : in ‘bpfilter’: Exactly one of ‘block_size’ and ‘block_list’ should be provided, but not both.
> try(bpfilter(b_model,block_list=block_list))
Error : in ‘bpfilter’: ‘Np’ must be specified
> try(bpfilter(b_model,Np=10,block_size=1000))
Error : in ‘bpfilter’: ‘block_size’ cannot be greater than the number of spatial units
> try(bpfilter(b_bpfilter,block_list=block_list,block_size=23))
Error : in ‘bpfilter’: Exactly one of ‘block_size’ and ‘block_list’ can be provided, but not both.
> try(bpfilter(b_bpfilter,Np=10,block_size=1000))
Error : in ‘bpfilter’: ‘block_size’ cannot be greater than the number of spatial units
> try(bpfilter(b_bpfilter,Np=-1))
Error : in ‘bpfilter’: number of particles, ‘Np’, must always be positive
> try(bpfilter(b_bpfilter,Np=1:1000))
Error : in ‘bpfilter’: ‘Np’ must have length 1 or length 3
> try(bpfilter(b_bpfilter,Np="JUNK"))
Error : in ‘bpfilter’: ‘Np’ must be a number, a vector of numbers, or a function
> test_params_matrix <- cbind(coef(b_model),coef(b_model),coef(b_model))
> try(bpfilter(b_bpfilter,params=test_params_matrix))
Error : ‘params’ must be a named numeric vector.
> 
> 
> ##
> ## enkf tested on bm
> ##
> 
> ## test error messages
> try(enkf())
Error : in ‘enkf’ : ‘data’ is a required argument.
> try(enkf("JUNK"))
Error : ‘enkf’ is undefined for ‘data’ of class ‘character’.
> try(enkf(b_model_no_rproc))
Error : in ‘enkf’ : ‘rprocess’ is a needed basic component.
> try(enkf(b_model_no_eunit_measure))
Error : in ‘enkf’ : ‘eunit_measure’ is a needed basic component.
> try(enkf(b_model_no_vunit_measure))
Error : in ‘enkf’ : ‘vunit_measure’ is a needed basic component.
> 
> set.seed(5)
> b_enkf <- enkf(b_model, Np = Np)
> paste("bm enkf loglik: ",round(logLik(b_enkf),10))
[1] "bm enkf loglik:  -10.8897941231"
> 
> ##
> ## girf on bm: moment and bootstrap methods, followed by error tests
> ##
> 
> set.seed(0)
> b_girf_mom <- girf(b_model,Np = floor(Np/2),lookahead = 1,
+   Nguide = floor(Np/2),
+   kind = 'moment',Ninter=2)
> paste("bm girf loglik, moment guide: ",round(logLik(b_girf_mom),10))
[1] "bm girf loglik, moment guide:  -14.9828908185"
> 
> ## for boostrap girf, we do not set Ninter, to test the default which is Ninter=U
> set.seed(0)
> b_girf_boot <- girf(b_model,Np = floor(Np/2),lookahead = 1,
+   Nguide = floor(Np/2),
+   kind = 'bootstrap')
> paste("bm girf loglik, bootstrap guide: ",round(logLik(b_girf_boot),10))
[1] "bm girf loglik, bootstrap guide:  -14.3228315101"
> 
> set.seed(0)
> b_girf_boot_repeat <- girf(b_girf_boot)
> paste("check girf on girfd_spatPomp: ",
+   logLik(b_girf_boot)==logLik(b_girf_boot_repeat))
[1] "check girf on girfd_spatPomp:  TRUE"
> 
> print("The following deliver an error message, to test it")
[1] "The following deliver an error message, to test it"
> try(girf())
Error : girf: data is a required argument.
> try(girf("JUNK"))
Error : girf is undefined for ‘object’ of class ‘character’.
> try(girf(b_girf_boot,Np=c(Inf)))
Error : in ‘girf’: ‘Np’ must be a single positive integer
> try(girf(b_girf_boot,Np=seq(from=10,length=N+1,by=2)))
Error : in ‘girf’: ‘Np’ must be a single positive integer
> try(girf(b_model_no_eunit_measure,kind='moment'))
Error : girf with kind = 'moment' requires eunit_measure
> try(girf(b_model_no_vunit_measure,kind='moment'))
Error : girf with kind = 'moment' requires vunit_measure
> try(girf(b_model_no_rproc,kind='moment'))
Error : in ‘girf’: ‘rprocess’, ‘dmeasure’ are needed basic components.
> try(girf(b_model,kind='moment'))
Error : in ‘girf’: ‘Np’ must be specified.
> try(girf(b_model,kind='moment',Np=5))
Error : in ‘girf’: argument "Nguide" is missing, with no default
> try(girf(b_model,kind='moment',Np=5,Nguide=3,tol=1:1000))
Error : in ‘girf’: ‘tol’ should be a small positive number.
> try(girf(b_model_no_rproc,kind='boot'))
Error : in ‘girf’: ‘rprocess’, ‘dmeasure’ are needed basic components.
> try(girf(b_model,kind='boot'))
Error : in ‘girf’: ‘Np’ must be specified.
> try(girf(b_model,kind='boot',Np=5))
Error : in ‘girf’: argument "Nguide" is missing, with no default
> try(girf(b_model,kind='boot',Np=5,Nguide=3,tol=1:1000))
Error : in ‘girf’: ‘tol’ should be a small positive number.
> 
> ## ------------------------------------------------------------
> ## Now, we test the inference methods
> ## ____________________________________________________________
> 
> b_rw.sd <- rw_sd(rho=0.02,X1_0=ivp(0.02))
> 
> ##############################################################
> ##
> ## igirf on bm
> ##
> ## A call to igirf using the moment-based guide function can test compiled
> ## code for eunit_measure, munit_measure, vunit_measure, dunit_measure,
> ## runit_measure, rprocess, skeleton, rinit and partrans. 
> ##
> ## we test both geometric and hyperbolic cooling
> 
> set.seed(1)
> b_igirf_geom <- igirf(b_model,
+   Ngirf = 2,
+   rw.sd = b_rw.sd,
+   cooling.type = "geometric",
+   cooling.fraction.50 = 0.5,
+   Np=Np,
+   Ninter = 2,
+   lookahead = 1,
+   Nguide = 5,
+   kind = 'moment',
+   verbose = FALSE
+ )
> paste("bm igirf loglik, geometric cooling, verbose=F: ",round(logLik(b_igirf_geom),10))
[1] "bm igirf loglik, geometric cooling, verbose=F:  -9.9887892835"
> 
> set.seed(1)
> b_igirf_geom_repeat <- igirf(b_igirf_geom,params=coef(b_model))
> paste("check igirf on igirfd_spatPomp: ",
+   logLik(b_igirf_geom)==logLik(b_igirf_geom_repeat))
[1] "check igirf on igirfd_spatPomp:  FALSE"
> 
> b_igirf_hyp <- igirf(b_model,
+   Ngirf = 2,
+   rw.sd = b_rw.sd,
+   cooling.type = "hyperbolic",
+   cooling.fraction.50 = 0.5,
+   Np=floor(Np/2),
+   Ninter = 2,
+   lookahead = 1,
+   Nguide = floor(Np/2),
+   kind = 'moment',
+   verbose = TRUE
+ )
igirf iteration 1 of 2 completed with likelihood  -11.56221 
       rho      sigma        tau       X1_0       X2_0 
0.39957108 1.00000000 1.00000000 0.01379269 0.00000000 
igirf iteration 2 of 2 completed with likelihood  -10.59957 
       rho      sigma        tau       X1_0       X2_0 
0.40074887 1.00000000 1.00000000 0.04083778 0.00000000 
> paste("bm igirf loglik, hyperbolic cooling, verbose=T: ",round(logLik(b_igirf_hyp),10))
[1] "bm igirf loglik, hyperbolic cooling, verbose=T:  -10.599572921"
> 
> plot(b_igirf_geom) -> b_igirf_plot
> head(b_igirf_plot$data)
  iteration  param       value
2         2 loglik -10.8072342
3         3 loglik  -9.9887893
4         1    rho   0.4000000
5         2    rho   0.4014437
6         3    rho   0.3984085
7         1  sigma   1.0000000
> 
> set.seed(1)
> b_igirf_boot_geom <- igirf(b_model,
+   Ngirf = 2,
+   rw.sd = b_rw.sd,
+   cooling.type = "geometric",
+   cooling.fraction.50 = 0.5,
+   Np=Np,
+   Ninter = 2,
+   lookahead = 1,
+   Nguide = 5,
+   kind = 'bootstrap',
+   verbose = FALSE
+ )
> paste("bm igirf boot loglik, geometric cooling, verbose=F: ",round(logLik(b_igirf_boot_geom),10))
[1] "bm igirf boot loglik, geometric cooling, verbose=F:  -9.9090272439"
> 
> b_igirf_boot_hyp <- igirf(b_model,
+   Ngirf = 2,
+   rw.sd = b_rw.sd,
+   cooling.type = "hyperbolic",
+   cooling.fraction.50 = 0.5,
+   Np=floor(Np/2),
+   Ninter = 2,
+   lookahead = 1,
+   Nguide = floor(Np/2),
+   kind = 'bootstrap',
+   verbose = TRUE
+ )
igirf iteration 1 of 2 completed with likelihood  -12.63759 
       rho      sigma        tau       X1_0       X2_0 
0.39913869 1.00000000 1.00000000 0.01175154 0.00000000 
igirf iteration 2 of 2 completed with likelihood  -11.11327 
       rho      sigma        tau       X1_0       X2_0 
0.40066011 1.00000000 1.00000000 0.04626405 0.00000000 
> paste("bm igirf boot loglik, hyperbolic cooling, verbose=T: ",round(logLik(b_igirf_hyp),10))
[1] "bm igirf boot loglik, hyperbolic cooling, verbose=T:  -10.599572921"
> 
> 
> print("The following deliver an error message, to test it")
[1] "The following deliver an error message, to test it"
> try(igirf())
Error : igirf: data is a required argument.
> try(igirf(data="JUNK"))
Error : igirf is undefined for ‘JUNK’of class ‘character’.
> try(igirf(b_igirf_boot_geom,Np=c(Inf)))
Error : in ‘igirf’ : Error: ‘Np’ must be a positive integer.

> try(igirf(b_igirf_boot_geom,Np=3))
<object of class ‘igirfd_spatPomp’>
> try(igirf(b_model_no_eunit_measure,kind='moment', Ngirf = 2, Nguide=2,
+   rw.sd = b_rw.sd, cooling.type = "hyperbolic", cooling.fraction.50 = 0.5,
+   Np=floor(Np/2), Ninter = 2))
Error : in ‘igirf’ : Error in if (max_log_weights > -Inf) {: missing value where TRUE/FALSE needed

In addition: Warning message:
'eunit_measure' unspecified. 
>   
> 
> # try(igirf(b_model_no_vunit_measure,kind='moment'))
> # try(igirf(b_model_no_rproc,kind='moment'))
> # try(igirf(b_model,kind='moment'))
> # try(igirf(b_model,kind='moment',Np=5))
> # try(igirf(b_model,kind='moment',Np=5,Nguide=3,tol=1:1000))
> # try(igirf(b_model_no_rproc,kind='boot'))
> # try(igirf(b_model,kind='boot'))
> # try(igirf(b_model,kind='boot',Np=5))
> # try(igirf(b_model,kind='boot',Np=5,Nguide=3,tol=1:1000))
> 
> ######################################################
> ##
> ## ienkf on bm, with geometric and hyperbolic cooling
> ##
> 
> b_ienkf_geom <- ienkf(b_model,
+   Nenkf=2,
+   Np = Np,
+   rw.sd=b_rw.sd,
+   cooling.type="geometric",
+   cooling.fraction.50 = 0.5,
+   verbose=FALSE
+ )
> paste("bm ienkf loglik, geometric cooling, verbose=F: ",round(logLik(b_ienkf_geom),10))
[1] "bm ienkf loglik, geometric cooling, verbose=F:  -11.6995986214"
> 
> b_ienkf_hyp <- ienkf(b_model,
+   Nenkf=2,
+   Np = Np,
+   rw.sd=b_rw.sd,
+   cooling.type="hyperbolic",
+   cooling.fraction.50 = 0.5,
+   verbose=TRUE
+ )
ienkf iteration 1 of 2 completed
ienkf iteration 2 of 2 completed
> 
> paste("bm ienkf loglik, hyperbolic cooling, verbose=T: ",round(logLik(b_ienkf_hyp),10))
[1] "bm ienkf loglik, hyperbolic cooling, verbose=T:  -9.7365825263"
> 
> ## test error messages for ienkf
> try(ienkf(b_model_no_rproc))
Error : in ‘ienkf’: ‘rprocess’, ‘eunit_measure’, ‘vunit_measure’ are needed basic components.
> try(ienkf(b_model, Nenkf="JUNK"))
Error : in ‘ienkf’: ‘Nenkf’ must be a positive integer.
> ienkf(b_model,Nenkf=2,Np = 3,rw.sd=b_rw.sd,cooling.type="geometric",
+   cooling.fraction.50 = 0.5,
+   .paramMatrix=cbind(coef(b_model),coef(b_model),coef(b_model)))
<object of class ‘ienkfd_spatPomp’>
> try(ienkf(b_model,Nenkf=2))
Error : in ‘ienkf’: argument "Np" is missing, with no default
> try(ienkf(b_model,Nenkf=2,Np=NULL))
Error : in ‘ienkf’: ‘Np’ must be specified.
> try(ienkf(b_model,Nenkf=2,Np="JUNK"))
Error : in ‘ienkf’: ‘Np’ must be a number or a vector of numbers
> try(ienkf(b_model,Nenkf=2,Np = 3))
Error : in ‘ienkf’: ‘rw.sd’ must be specified!
> try(ienkf(b_model,Nenkf=2,Np = 3,rw.sd=b_rw.sd))
Error : in ‘ienkf’: ‘cooling.fraction.50’ is a required argument.
> try(ienkf(b_model,Nenkf=2,Np = 3,rw.sd=b_rw.sd,cooling.fraction.50 = 1000))
Error : in ‘ienkf’: ‘cooling.fraction.50’ must be in (0,1].
> try(ienkf(b_model,Nenkf=2,Np = 3,rw.sd=b_rw.sd,cooling.fraction.50 = 0.5,.indices=1:1000))
Error : in ‘ienkf’: ‘.indices’ for ancestor tracking is not supported.
> 
> ####################################################
> ##
> ## iubf on bm, with geometric and hyperbolic cooling
> ##
> 
> set.seed(8)
> 
> b_iubf_geom <- iubf(b_model,
+   Nubf = 2,
+   Nrep_per_param = floor(Np/2),
+   Nparam = floor(Np/2),
+   nbhd = b_bag_nbhd,
+   prop = 0.8,
+   rw.sd =b_rw.sd,
+   cooling.type = "geometric",
+   cooling.fraction.50 = 0.5,
+   verbose=FALSE
+ )
> paste("bm iubf loglik, geometric cooling, verbose=F: ",round(logLik(b_iubf_geom),10))
[1] "bm iubf loglik, geometric cooling, verbose=F:  -11.130525238"
> 
> b_iubf_hyp <- iubf(b_model,
+   Nubf = 2,
+   Nrep_per_param = floor(Np/2),
+   Nparam = floor(Np/2),
+   nbhd = b_bag_nbhd,
+   prop = 0.8,
+   rw.sd =b_rw.sd,
+ #  cooling.type = "hyperbolic",
+   cooling.type = "geometric",
+   cooling.fraction.50 = 0.5,
+   verbose=TRUE
+ )
working on observation times  1  in iteration  1 
working on observation times  2  in iteration  1 
iubf iteration 1 of 2 completed with log-likelihood -11.39115 
         rho        sigma          tau         X1_0         X2_0 
0.4020068358 1.0000000000 1.0000000000 0.0008175748 0.0000000000 
working on observation times  1  in iteration  2 
working on observation times  2  in iteration  2 
iubf iteration 2 of 2 completed with log-likelihood -10.16506 
        rho       sigma         tau        X1_0        X2_0 
0.399236177 1.000000000 1.000000000 0.004066272 0.000000000 
> paste("bm ienkf loglik, hyperbolic cooling, verbose=T: ",round(logLik(b_iubf_hyp),10))
[1] "bm ienkf loglik, hyperbolic cooling, verbose=T:  -10.16506276"
> 
> 
> 
> ## --------------------------------------------
> ## using bm to test simulate and plot
> ## ____________________________________________
> 
> set.seed(9)
> 
> b_sim1 <- simulate(b_model,nsim=2,format='data.frame')
> head(b_sim1,10)
# A tibble: 8 × 5
   time .id   unitname      X      Y
  <dbl> <ord> <chr>     <dbl>  <dbl>
1     1 1     U1        0.399  0.513
2     1 2     U1        1.00   1.16 
3     1 1     U2       -0.549 -1.60 
4     1 2     U2       -0.483  0.817
5     2 1     U1        0.147 -1.01 
6     2 2     U1        1.37   2.17 
7     2 1     U2       -1.31  -1.09 
8     2 2     U2       -0.806 -1.54 
> b_sim2 <- simulate(b_model,nsim=2,format='data.frame',include.data=TRUE)
> head(b_sim2,10)
# A tibble: 10 × 5
    time .id   unitname       X      Y
   <dbl> <ord> <chr>      <dbl>  <dbl>
 1     1 data  U1        2.98    3.61 
 2     1 1     U1       -0.713   1.09 
 3     1 2     U1        0.0866 -1.34 
 4     1 data  U2        0.824   2.81 
 5     1 1     U2       -0.263  -0.680
 6     1 2     U2       -0.616  -0.946
 7     2 data  U1        2.03    1.73 
 8     2 1     U1        0.352  -0.702
 9     2 2     U1       -2.31   -3.44 
10     2 data  U2       -0.759  -0.849
> b_sim3 <- simulate(b_model,nsim=2,format='spatPomps')
> 
> plot(b_model,type="l",log=FALSE)
> b_sim3v2 <- b_sim3[[1]]
> b_sim3v2@data <- exp(b_sim3v2@data)
> plot(b_sim3v2,type="l",log=TRUE)
> plot(b_sim3[[2]],type="h")
> 
> ## --------------------------------------------
> ## using bm to test spatPomp workhorse functions, extending pomp:
> ## vunit_measure, eunit_measure, munit_measure, dunit_measure
> ##
> ## these are tested implicitly in the methods, but here is
> ## a more direct test
> ## ____________________________________________
> 
> 
> b_s <- states(b_model)[,1,drop=FALSE]
> dim(b_s) <- c(dim(b_s),1)
> dimnames(b_s) <- list(variable=dimnames(states(b_model))[[1]], rep=NULL)
> b_p <- coef(b_model)
> dim(b_p) <- c(length(b_p),1)
> dimnames(b_p) <- list(param=names(coef(b_model)))
> b_y <- obs(b_model)[,1,drop=FALSE]
> 
> vunit_measure(b_model, x=b_s, unit=2, time=1, params=b_p)
, , 1

      rep
unit   [,1]
  [1,]    1

> 
> eunit_measure(b_model, x=b_s, unit=2, time=1, params=b_p)
, , 1

      rep
unit        [,1]
  [1,] 0.8235357

> 
> b_array.params <- array(b_p,
+   dim = c(length(b_p),length(unit_names(b_model)), 1, 1),
+   dimnames = list(params = rownames(b_p)))
> b_vc <- c(4, 9) # this should have length equal to the number of units
> dim(b_vc) <- c(length(b_vc), 1, 1)
> 
> munit_measure(b_model, x=b_s, vc=b_vc, Np=1, unit = 1, time=1,
+   params=b_array.params)
, , 1, 1

       
params  [,1]
  rho    0.4
  sigma  1.0
  tau    2.0
  X1_0   0.0
  X2_0   0.0

> 
> dunit_measure(b_model, y=b_y,
+   x=b_s, unit=1, time=1, params=b_p)
      time
rep         [,1]
  [1,] -1.112688
> 
> runit_measure(b_model, x=b_s, unit=2, time=1, params=b_p)
, , 1

        rep
variable     [,1]
      Y1 1.505094

> 
> vec_rmeasure(b_model,x=b_s,time=1, params=b_p)
, , 1

           [,1]
[1,]  0.4213165
[2,] -1.7230998

> b_p_3d <- b_p
> dim(b_p_3d) <- c(5,1,1)
> dimnames(b_p_3d) <- c(dimnames(b_p),NULL)
> vec_rmeasure(b_model,x=b_s,time=1, params=b_p_3d)
, , 1

            [,1]
[1,] -0.05396116
[2,] -0.03157348

> 
> ## --------------------------------------------
> ## using bm to test edge cases and utility functions
> ## perhaps only of technical interest
> ## ____________________________________________
> 
> print(b_model)
<object of class ‘spatPomp’>
> 
> # check how u is treated by dunit_measure, runit_measure, eunit_measure,
> # vunit_measure and munit_measure. this should output unit-1 to
> # be consistent with Csnippet indexing.
> 
> b_u <- spatPomp(b_model,
+   dunit_measure=spatPomp_Csnippet("lik=u;"),
+   eunit_measure=spatPomp_Csnippet("ey=u;"),
+   munit_measure=spatPomp_Csnippet("M_tau=u;"),
+   vunit_measure=spatPomp_Csnippet("vc=u;"),
+   runit_measure=spatPomp_Csnippet("Y=u;")  
+ )
> 
> vunit_measure(b_u, x=b_s, unit=2, time=1, params=b_p)
, , 1

      rep
unit   [,1]
  [1,]    1

> eunit_measure(b_u, x=b_s, unit=2, time=1, params=b_p)
, , 1

      rep
unit   [,1]
  [1,]    1

> munit_measure(b_u, x=b_s, vc=b_vc, Np=1, unit = 2, time=1,
+   params=b_array.params)
, , 1, 1

       
params  [,1]
  rho    0.4
  sigma  1.0
  tau    1.0
  X1_0   0.0
  X2_0   0.0

> dunit_measure(b_u, y=b_y,x=b_s, unit=2, time=1, params=b_p)
      time
rep    [,1]
  [1,]    1
> runit_measure(b_u, x=b_s, unit=2, time=1, params=b_p)
, , 1

        rep
variable [,1]
      Y1    1

> 
> dev.off()
null device 
          1 
> 
> ## test spatPomp_Csnippet variable construction
> spatPomp_Csnippet("lik=u;",unit_statenames="A",unit_obsnames=c("B","C"),
+   unit_covarnames="D",
+   unit_ivpnames="E",unit_paramnames="F",unit_vfnames="G")
An object of class "Csnippet"
Slot "text":
[1] " double *A = &A1;\nconst double *B = &B1;\nconst double *C = &C1;\nconst double *D = &D1;\nconst double *E_0 = &E1_0;\nconst double *F = &F1;\ndouble *DG = &DG1;\nlik=u;"

> 
> ## --------------------------------------------
> ## using bm to test spatPomp() replacement functionality
> ## ____________________________________________
> 
> b_rep1 <- spatPomp(b_model,params=coef(b_model))
> for(slt in slotNames(b_model)) if(!identical(slot(b_model,slt),
+   slot(b_rep1,slt))) print(slt)
[1] "states"
> 
> # test parameter replacement
> b_rep2 <- spatPomp(b_model,params=coef(b_model)+1)
> if(!identical(coef(b_rep2),coef(b_model)+1)) stop('problem with parameter replacement')
> 
> # test do-nothing behavior
> b_rep3 <- spatPomp(b_model)
> 
> ## --------------------------------------------
> ## using bm to test spatPomp() warning messages
> ## ____________________________________________
> 
> print("The following deliver error messages, to test them")
[1] "The following deliver error messages, to test them"
> try(spatPomp(data=as.data.frame(b_model),units=NULL),outFile=stdout())
Error : in spatPomp : ‘times’ should be a single name identifying the column of data that represents the observation times. ‘units’ should be likewise for column that represents the observation units.
> try(spatPomp("test on type character"))
Error : in ‘spatPomp’: ‘data’ must be a data frame or an object of class ‘spatPomp’.
> 
> try(spatPomp())
Error : in ‘spatPomp’: ‘data’ is a required argument
> b_data <- as.data.frame(b_model)
> try(spatPomp(data=b_data,times="time",units="unit"))
Error : in ‘spatPomp’: ‘t0’ is a required argument
> try(spatPomp(data=b_data,times="NONSENSE",units="unit",t0=0))
Error : in ‘spatPomp’: ‘times’ does not identify a single column of ‘data’ by name.
> try(spatPomp(data=b_data,times="time",units="NONSENSE",t0=0))
Error : in ‘spatPomp’: ‘units’ does not identify a single column of ‘data’ by name.
> spatPomp(data=b_data,times="time",units="unit",t0=0,
+   params=list(coef(b_model)))
<object of class ‘spatPomp’>
> b_data2 <- b_data
> names(b_data2) <- c("time","unit","X","X")
> try(spatPomp(data=b_data2,times="time",units="unit"))
Error : in ‘spatPomp’: names of data variables must be unique.
> b_data_only_model <- spatPomp(data=b_data,times="time",units="unit",
+   t0=0)
> 
> # test error messages for covariates with data.frame class for spatPomp()
> b_covar_error <- data.frame(time_name_error=0:2,Z=3:5)
> try(spatPomp(data=b_data,times="time",units="unit",t0=0,
+   covar=b_covar_error))
Error : in ‘spatPomp’: ‘covariate’ data.frame should have a time column with the same name as the time column of the observation data.frame
> 
> b_unit_covar_names_error <- data.frame(time=c(0:2,0:2),
+   JUNK=rep(c("U1","U2"),each=3), Z=rep(3:5,times=2))
> try(spatPomp(data=b_data,times="time",units="unit",t0=0,
+   covar=b_unit_covar_names_error))
Error : in ‘spatPomp’: for unit-specific covariates, there should be a column with the unit name matching the data
> 
> b_shared_covar <- data.frame(time=0:2,Z=3:5)
> model_shared_covar <- spatPomp(data=b_data,times="time",units="unit",
+   t0=0,covar=b_shared_covar, shared_covarnames="Z")
> 
> b_unit_covar <- data.frame(time=c(0:2,0:2),unit=rep(c("U1","U2"),each=3),
+   Z=rep(3:5,times=2))
> model_unit_covar <- spatPomp(data=b_data,times="time",units="unit",
+   t0=0,covar=b_unit_covar,skeleton=NULL,partrans=NULL,
+   unit_accumvars = "JUNK")
> 
> try(spatPomp(data=b_data,times="time",units="unit",t0=0,
+   covar=b_unit_covar,shared_covarnames ="JUNK"))
Error : in ‘spatPomp’: ‘shared_covarnames’ currently supported only when there are no unit-specific covariates
> 
> # test spatPomp warnings with argument of class spatPomp
> 
> # perhaps surprisingly, this gives no error
> spatPomp(model_unit_covar,timename="JUNK",unitname="JUNK",
+   unit_accumvars="JUNK", globals=Csnippet("JUNK"),
+   partrans=NULL,skeleton=NULL)
<object of class ‘spatPomp’>
>   
> try(spatPomp(data=model_unit_covar,covar=b_covar_error))
Error : in ‘spatPomp’: ‘covariate’ data.frame should have a time column with the same name as the time column of the observation data.frame
> 
> spatPomp(model_shared_covar)
<object of class ‘spatPomp’>
> 
> spatPomp(data=model_shared_covar,covar=b_shared_covar,
+   shared_covarnames="Z")
<object of class ‘spatPomp’>
> 
> spatPomp(data=model_unit_covar,covar=b_unit_covar)
<object of class ‘spatPomp’>
> 
> try(spatPomp(data=model_unit_covar,covar=b_shared_covar))
Error : in ‘spatPomp’: for unit-specific covariates, there should be a column with the unit name matching the data
> 
> try(spatPomp(data=model_unit_covar,covar=b_unit_covar,
+   shared_covarnames="Z"))
Error : in ‘spatPomp’: ‘shared_covarnames’ currently supported only when there are no unit-specific covariates
> 
> 
> ## -----------------------------------------------------------------
> ## using bm to test behavior of inference methods when logLik = -Inf
> ## _________________________________________________________________
> 
> 
> b_inf <- spatPomp(b_model,
+   dmeasure = spatPomp_Csnippet(
+     method="dmeasure",
+     unit_statenames="X",
+     unit_obsnames="Y",
+     code = "
+       lik=0;
+       if(give_log) lik = log(lik);
+     "
+   ),
+   dunit_measure = spatPomp_Csnippet("
+     lik = 0;
+     if(give_log) lik = log(lik);
+   ")
+ )
> 
> dmeasure(b_inf,x=states(b_model))
      time
.id    [,1] [,2]
  [1,]    0    0
> 
> dmeasure(b_inf,x=states(b_model),log=T)
      time
.id    [,1] [,2]
  [1,] -Inf -Inf
> 
> vec_dmeasure(b_inf,y=obs(b_inf),x=states(b_model),units=1:U,
+   times=1:2,params=coef(b_inf),log=T)[,,1]
     [,1] [,2]
[1,] -Inf -Inf
[2,] -Inf -Inf
> 
> b_girf_mom_inf <- girf(b_inf,Np = floor(Np/2),lookahead = 1,
+   Nguide = floor(Np/2),
+   kind = 'moment',Ninter=2)
> paste("bm moment girf loglik, zero measurement: ",
+   round(logLik(b_girf_mom_inf),10))
[1] "bm moment girf loglik, zero measurement:  -Inf"
> 
> set.seed(0)
> b_girf_boot_inf <- girf(b_inf,Np = floor(Np/2),lookahead = 1,
+   Nguide = floor(Np/2),
+   kind = 'bootstrap',Ninter=2)
> paste("bm bootstrap girf loglik, zero measurement: ",
+   round(logLik(b_girf_boot_inf),10))
[1] "bm bootstrap girf loglik, zero measurement:  -Inf"
> 
> set.seed(5)
> b_bpfilter_inf <- bpfilter(b_inf, Np = Np, block_size = 1)
> paste("bm bpfilter loglik, zero measurement: ",
+   round(logLik(b_bpfilter_inf),10))
[1] "bm bpfilter loglik, zero measurement:  NaN"
> 
> 
> 
