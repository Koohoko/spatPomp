% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/igirf.R
\docType{methods}
\name{igirf}
\alias{igirf}
\alias{igirf-spatpomp}
\alias{igirf,spatpomp-method}
\alias{igirf-igirfd_spatpomp}
\alias{igirf,igirfd_spatpomp-method}
\title{Iterated guided intermediate resampling filter (iGIRF)}
\usage{
\S4method{igirf}{spatpomp}(data, Ngirf, Np, rw.sd, cooling.type,
  cooling.fraction.50, Ninter, lookahead, Nguide, h, theta.to.v,
  v.to.theta, tol = 1e-17, max.fail = Inf, save.states = FALSE, ...,
  verbose = getOption("verbose", FALSE))

\S4method{igirf}{igirfd_spatpomp}(data, Ngirf, Np, rw.sd, cooling.type,
  cooling.fraction.50, Ninter, lookahead, Nguide, h, theta.to.v,
  v.to.theta, tol, ..., verbose = getOption("verbose", FALSE))
}
\arguments{
\item{data}{either a data frame holding the spatiotemporal data,
or an object of class \sQuote{spatPomp},
i.e., the output of another \pkg{spatPomp} calculation.}

\item{Ngirf}{the number of iterations of perturbed GIRF.}

\item{Np}{
    the number of particles to use in filtering.
    This may be specified as a single positive integer, in which case the same number of particles will be used at each timestep.
    Alternatively, if one wishes the number of particles to vary across timestep, one may specify \code{Np} either as a vector of positive integers (of length \code{length(time(object))}) or as a function taking a positive integer argument.
    In the latter case, \code{Np(n)} must be a single positive integer, representing the number of particles to be used at the \code{n}-th timestep:
    \code{Np(1)} is the number of particles to use going from \code{timezero(object)} to \code{time(object)[1]},
    \code{Np(2)}, from \code{time(object)[1]} to \code{time(object)[2]},
    and so on.
    \strong{Note that this behavior differs from that of \code{\link{mif}}!}
  }

\item{rw.sd}{
    specification of the magnitude of the random-walk perturbations that will be applied to some or all model parameters.
    Parameters that are to be estimated should have positive perturbations specified here.
    The specification is given using the \code{rw.sd} function, which creates a list of unevaluated expressions.
    The latter are evaluated in a context where the model time variable is defined (as \code{time}).
    The expression \code{ivp(s)} can be used in this context as shorthand for \preformatted{ifelse(time==time[1],s,0).}
    Likewise, \code{ivp(s,lag)} is equivalent to \preformatted{ifelse(time==time[lag],s,0).}
    See below for some examples.
    The perturbations that are applied are normally distributed with the specified s.d.
    If \code{transform = TRUE}, then they are applied on the estimation scale.
  }

\item{cooling.type}{
    specifications for the cooling schedule, i.e., the manner in which the intensity of the parameter perturbations is reduced with successive filtering iterations.
    \code{cooling.type} specifies the nature of the cooling schedule.
    See below (under \dQuote{Specifying the perturbations}) for more detail.
  }

\item{cooling.fraction.50}{
    specifications for the cooling schedule, i.e., the manner in which the intensity of the parameter perturbations is reduced with successive filtering iterations.
    \code{cooling.type} specifies the nature of the cooling schedule.
    See below (under \dQuote{Specifying the perturbations}) for more detail.
  }

\item{tol}{
    passed to the particle filter.
    See the descriptions under \code{\link{pfilter}}.
  }

\item{max.fail}{
    passed to the particle filter.
    See the descriptions under \code{\link{pfilter}}.
  }

\item{...}{
    Any additional arguments given to \code{pomp} will be made available to each of the basic components.
    To prevent errors due to misspellings, a warning is issued if any such arguments are detected.
  }

\item{verbose}{
    logical; if TRUE, print progress reports.
  }
}
\value{
Upon successful completion, \code{igirf} returns an object of class
\sQuote{igirfd.spatpomp}.
}
\description{
An implementation of a parameter estimation algorithm combining
GIRF with IF2, proposed by Park and Ionides (2019), following the pseudocode in Asfaw, Ionides and King (2019).
}
\section{Methods}{

The following methods are available for such an object:
\describe{
\item{\code{\link{loglik}}}{ yields a biased estimate of the log-likelihood of the data under the model. }
}
}

\references{
\park2019

\asfaw2019
}
\seealso{
Other particle filter methods: \code{\link{asif}},
  \code{\link{girf}}, \code{\link{hippie}}

Other \pkg{spatpomp} filtering methods: \code{\link{asif}},
  \code{\link{girf}}
}
\concept{\pkg{spatpomp} filtering methods}
\concept{particle filter methods}
