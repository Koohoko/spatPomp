% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spatpomp.R
\name{spatpomp}
\alias{spatpomp}
\title{Constructor of the basic spatPomp object}
\usage{
spatpomp(data, units, unit_index, times, covar, tcovar, t0, ...,
  unit_dmeasure, unit_rmeasure, unit_statenames, global_statenames,
  rprocess, rmeasure, dprocess, dmeasure, skeleton, rinit, cdir, cfile,
  shlib.args, userdata, PACKAGE, globals, statenames, paramnames, obstypes,
  accumvars, covarnames, partrans, verbose = getOption("verbose", FALSE))
}
\arguments{
\item{data}{either a data frame holding the spatiotemporal data,
or an object of class \sQuote{spatPomp},
i.e., the output of another \pkg{spatPomp} calculation.}

\item{times}{
    required; the time series data and times at which observations are made.
    \code{data} should be given as a data-frame and \code{times} must indicate the column of observation times by name or index.
    \code{times} must be numeric and strictly increasing.
    Internally, \code{data} will be internally coerced to an array with storage-mode \code{double}.

    In addition, a \code{pomp} object can be supplied in the \code{data} argument.
    In this case, the call to \code{pomp} will add element to, or replace elements of, the supplied \code{pomp} object.
  }

\item{covar}{
    optional data frame of covariates:
    \code{covar} is the table of covariates (one column per variable);
    \code{tcovar} the name or the index of the time variable.

    If a covariate table is supplied, then the value of each of the covariates is interpolated as needed.
    The resulting interpolated values are made available to the appropriate basic components.
    Note that \code{covar} will be coerced internally to storage mode \code{double}.
    See below under \dQuote{Covariates} for more details.
  }

\item{tcovar}{
    optional data frame of covariates:
    \code{covar} is the table of covariates (one column per variable);
    \code{tcovar} the name or the index of the time variable.

    If a covariate table is supplied, then the value of each of the covariates is interpolated as needed.
    The resulting interpolated values are made available to the appropriate basic components.
    Note that \code{covar} will be coerced internally to storage mode \code{double}.
    See below under \dQuote{Covariates} for more details.
  }

\item{t0}{
    The zero-time, at which the stochastic dynamical system is to be initialized.
    This must be no later than the time of the first observation, i.e., \code{t0 <= times[1]}.
    This argument is required whenever \code{data} is a data-frame.
  }

\item{...}{
    Any additional arguments given to \code{pomp} will be made available to each of the basic components.
    To prevent errors due to misspellings, a warning is issued if any such arguments are detected.
  }

\item{rprocess}{
    optional; specification of the simulator and probability density evaluation function of the unobserved state process.
    See below under \dQuote{The Unobserved Markov State-Process Model} for details.

    \strong{Note:} it is not typically necessary (or even feasible) to define \code{dprocess}.
    In fact, no current \pkg{pomp} inference algorithm makes use of \code{dprocess}.
    This functionality is provided only to support future algorithm development.
  }

\item{rmeasure}{
    optional; specifications of the measurement model.
    See below under \dQuote{The Measurement Model} for details.
  }

\item{dprocess}{
    optional; specification of the simulator and probability density evaluation function of the unobserved state process.
    See below under \dQuote{The Unobserved Markov State-Process Model} for details.

    \strong{Note:} it is not typically necessary (or even feasible) to define \code{dprocess}.
    In fact, no current \pkg{pomp} inference algorithm makes use of \code{dprocess}.
    This functionality is provided only to support future algorithm development.
  }

\item{dmeasure}{
    optional; specifications of the measurement model.
    See below under \dQuote{The Measurement Model} for details.
  }

\item{skeleton}{
    optional; the deterministic skeleton of the unobserved state process.
    See below under \dQuote{The Deterministic Skeleton} for details.
  }

\item{cdir}{
    optional character variables.
    \code{cdir} specifies the name of the directory within which C snippet code will be compiled.
    By default, this is in a temporary directory specific to the running instance of \R.
    \code{cfile} gives the name of the file (in directory \code{cdir}) into which C snippet codes will be written.
    By default, a random filename is used.
    The \code{shlib.args} can be used to pass command-line arguments to the \code{R CMD SHLIB} call that will compile the C snippets.
  }

\item{cfile}{
    optional character variables.
    \code{cdir} specifies the name of the directory within which C snippet code will be compiled.
    By default, this is in a temporary directory specific to the running instance of \R.
    \code{cfile} gives the name of the file (in directory \code{cdir}) into which C snippet codes will be written.
    By default, a random filename is used.
    The \code{shlib.args} can be used to pass command-line arguments to the \code{R CMD SHLIB} call that will compile the C snippets.
  }

\item{shlib.args}{
    optional character variables.
    \code{cdir} specifies the name of the directory within which C snippet code will be compiled.
    By default, this is in a temporary directory specific to the running instance of \R.
    \code{cfile} gives the name of the file (in directory \code{cdir}) into which C snippet codes will be written.
    By default, a random filename is used.
    The \code{shlib.args} can be used to pass command-line arguments to the \code{R CMD SHLIB} call that will compile the C snippets.
  }

\item{PACKAGE}{
    optional string giving the name of the dynamically loaded library in which any native routines are to be found.
    This is only useful if one or more of the model components has been specified using a precompiled dynamically loaded library;
    it is not used for any component specified using C snippets.
  }

\item{globals}{
    optional character;
    C code that will be included in the source for (and therefore hard-coded into) the shared-object library created when the call to \code{pomp} uses C snippets.
    If no C snippets are used, \code{globals} has no effect.
  }

\item{statenames}{
    optional character vectors specifying the names of observables, state variables, parameters, and covariates, respectively.
    These are used only in the event that one or more of the basic components are defined using C snippets or native routines.
    It is usually unnecessary to specify \code{obsnames} or \code{covarnames}, as these will by default be read from \code{data} and \code{covars}, respectively.
  }

\item{paramnames}{
    optional character vectors specifying the names of observables, state variables, parameters, and covariates, respectively.
    These are used only in the event that one or more of the basic components are defined using C snippets or native routines.
    It is usually unnecessary to specify \code{obsnames} or \code{covarnames}, as these will by default be read from \code{data} and \code{covars}, respectively.
  }

\item{covarnames}{
    optional character vectors specifying the names of observables, state variables, parameters, and covariates, respectively.
    These are used only in the event that one or more of the basic components are defined using C snippets or native routines.
    It is usually unnecessary to specify \code{obsnames} or \code{covarnames}, as these will by default be read from \code{data} and \code{covars}, respectively.
  }
}
\description{
This function constructs a \sQuote{spatPomp} object, encoding a spatiotemporal partially observed Markov process (\acronym{SpatPOMP}) model together with a uni- or multi-variate time series on a collection of units.
Users will typically develop a POMP model for a single unit before embarking on a coupled SpatPOMP analysis.
Consequently, we assume some familiarity with \pkg{pomp} and its description by King, Nguyen and Ionides (2016).
The \code{spatPomp} class inherits from \code{pomp} with the additional unit structure being a defining feature of the resulting models and inference algorithms.
}
